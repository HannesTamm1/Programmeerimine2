
@{
    ViewData["Title"] = "Index";
    @model IEnumerable<KooliProjekt.Data.Product>
    @if (Model != null)
    {
        @(await Component.InvokeAsync<PagerViewComponent>(Model))
    }
    else
    {
        <p>No data available.</p>
    }

    {
        ViewData["Title"] = "Index";
    }
}

<h1>Index</h1>

<p>
    public async Task<IActionResult> Index(int page = 1)
    {
        var pagedResult = await _context.Products.GetPagedAsync(page, 5);
        return View(pagedResult.Items); // Assuming pagedResult.Items is of type IEnumerable<Product>
    }
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Title
            </th>
            <th>
                Title
            </th>
            <th>
                Title
            </th>
            <th>
                Title
            </th>
            <th>
                Title
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhotoUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Id)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
